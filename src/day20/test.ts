import {deepCopy, cropImage, bin2dec, enhance, litPixels, dot2bin} from './day20_utils';

let sampleAlgo
sampleAlgo = sampleAlgo.replace(/\./g,'0');
sampleAlgo = sampleAlgo.replace(/#/g,'1');

const sampleImage = [
    '10010',
    '10000',
    '11001',
    '00100',
    '00111'
];


describe('Helpers', () => {
    test('deepCopy', () => {
        const a = [[0,1],[2,3]];
        const b:number[][] = deepCopy(a);
        b[0][1] = 2;
        expect(a).toEqual([[0,1],[2,3]]);
        expect(b).toEqual([[0,2],[2,3]]);
    });
    test('bin2dec', () => {
        expect(bin2dec('0000')).toEqual(0);
        expect(bin2dec('1000')).toEqual(8);
        expect(bin2dec('11111111')).toEqual(255);
    });
    test('dot2bin', () => {
        expect(dot2bin('....')).toEqual('0000');
        expect(dot2bin('#...')).toEqual('1000');
        expect(dot2bin('########')).toEqual('11111111');
    })

});

describe('cropImage', () => {
    test ('Nothing to crop', () => {
        expect(cropImage([
            '1000000',
            '0000100',
            '0011100',
            '1111111',
            '0000000',
            '0001000'
        ])).toEqual([
            '0000000000000',
            '0000000000000',
            '0000000000000',
            '0001000000000',
            '0000000100000',
            '0000011100000',
            '0001111111000',
            '0000000000000',
            '0000001000000',
            '0000000000000',
            '0000000000000',
            '0000000000000'
        ]);
    });
    test ('Crop top and bottom only', () => {
        expect(cropImage([
                '0000000',
                '0000000',
                '0000100',
                '0011100',
                '1111111',
                '0000000',
                '0001000',
                '0000000'
            ])).toEqual([
                '0000000000000',
                '0000000000000',
                '0000000000000',
                '0000000100000',
                '0000011100000',
                '0001111111000',
                '0000000000000',
                '0000001000000',
                '0000000000000',
                '0000000000000',
                '0000000000000'
        ]);
    });
    test ('Crop left only', () => {
            expect(cropImage([
                '0000100',
                '0000000',
                '0000100',
                '0011100',
                '0011111',
                '0000000',
                '0001000',
                '0000001'
            ])).toEqual([
                '00000000000',
                '00000000000',
                '00000000000',
                '00000100000',
                '00000000000',
                '00000100000',
                '00011100000',
                '00011111000',
                '00000000000',
                '00001000000',
                '00000001000',
                '00000000000',
                '00000000000',
                '00000000000'
        ]);
    });
    test ('Crop right only', () => {
        expect(cropImage([
            '0010000',
            '0000000',
            '0010000',
            '1110000',
            '1111110',
            '0000000',
            '0100000',
            '0000100'
        ])).toEqual([
            '000000000000',
            '000000000000',
            '000000000000',
            '000001000000',
            '000000000000',
            '000001000000',
            '000111000000',
            '000111111000',
            '000000000000',
            '000010000000',
            '000000010000',
            '000000000000',
            '000000000000',
            '000000000000'
    ]);
    });
    test ('Complex crop', () => {
        expect(cropImage([
            '1010000',
            '0000000',
            '0010000',
            '1110000',
            '1110100',
            '0000000',
            '0100000',
            '0000000'
        ])).toEqual([
            '00000000000',
            '00000000000',
            '00000000000',
            '00010100000',
            '00000000000',
            '00000100000',
            '00011100000',
            '00011101000',
            '00000000000',
            '00001000000',
            '00000000000',
            '00000000000',
            '00000000000'
    ]);
    });
});

describe('enhance', () => {
    const image = sampleImage;
    test('Sample from task', () => {
        expect(enhance(image,sampleAlgo,'0')).toEqual([
            '0000000000000',
            '0000000000000',
            '0000000000000',
            '0000110110000',
            '0001001010000',
            '0001101001000',
            '0001111001000',
            '0000100110000',
            '0000011001000',
            '0000001010000',
            '0000000000000',
            '0000000000000',
            '0000000000000'
        ]);
    });
    test('Second sample from task', () => {
        expect(enhance(enhance(image,sampleAlgo,'0'),sampleAlgo,'0')).toEqual([
            '000000000000000',
            '000000000000000',
            '000000000000000',
            '000000000010000',
            '000010010100000',
            '000101000111000',
            '000100011010000',
            '000100000101000',
            '000010111110000',
            '000001011111000',
            '000000110110000',
            '000000011100000',
            '000000000000000',
            '000000000000000',
            '000000000000000'
        ]);
    })
});

describe ('litPixels', () => {
    test('Simple test', () => {
        expect(litPixels(['11010101','11100000'])).toEqual(8);
    })
})

describe('Complete sample test', () => {
    test('First part', () => {
        expect(litPixels(enhance(enhance(sampleImage,sampleAlgo,'0'),sampleAlgo,'0'))).toEqual(35);
    });
});